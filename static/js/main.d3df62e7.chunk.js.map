{"version":3,"sources":["components/Sidebar.js","components/Editor.js","App.js","index.js"],"names":["Sidebar","props","noteElements","notes","map","note","index","React","createElement","key","id","className","concat","currentNote","onClick","setCurrentNoteId","body","split","event","deleteNote","newNote","Editor","_ref","updateNote","selectedTab","setSelectedTab","useState","converter","Showdown","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","ReactMde","value","onChange","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","minEditorHeight","heightUnits","App","setNotes","JSON","parse","localStorage","getItem","currentNoteId","createNewNote","nanoid","prevNotes","findCurrentNote","find","useEffect","setItem","stringify","length","Split","sizes","direction","noteId","stopPropagation","oldNotes","filter","oldNote","text","newArray","i","unshift","push","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d3df62e7.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function Sidebar(props) {\n\tconst noteElements = props.notes.map((note, index) => (\n\t\t<div key={note.id}>\n\t\t\t<div\n\n\t\t\t\tclassName={`title ${note.id === props.currentNote.id ? \"selected-note\" : \"\"\n\t\t\t\t\t}`}\n\t\t\t\tonClick={() => props.setCurrentNoteId(note.id)}\n\t\t\t>\n\t\t\t\t<h4 className=\"text-snippet\">{note.body.split(\"\\n\")[0]}</h4>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"delete-btn\"\n\t\t\t\t\tonClick={(event) => props.deleteNote(event, note.id)}\n\t\t\t\t>\n\t\t\t\t\t<i className=\"gg-trash trash-icon\"></i>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t))\n\n\n\n\treturn (\n\t\t<section className=\"pane sidebar\">\n\t\t\t<div className=\"sidebar--header\">\n\t\t\t\t<h3>Notes</h3>\n\t\t\t\t<button className=\"new-note\" onClick={props.newNote}>+</button>\n\t\t\t</div>\n\t\t\t{noteElements}\n\t\t</section>\n\t)\n}\n","import React from \"react\"\nimport ReactMde from \"react-mde\"\nimport Showdown from \"showdown\"\n\nexport default function Editor({ currentNote, updateNote }) {\n\tconst [selectedTab, setSelectedTab] = React.useState(\"write\")\n\n\tconst converter = new Showdown.Converter({\n\t\ttables: true,\n\t\tsimplifiedAutoLink: true,\n\t\tstrikethrough: true,\n\t\ttasklists: true,\n\t})\n\n\treturn (\n\t\t<section className=\"pane editor\">\n\n\t\t\t<ReactMde\n\t\t\t\tvalue={currentNote.body}\n\t\t\t\tonChange={updateNote}\n\t\t\t\tselectedTab={selectedTab}\n\t\t\t\tonTabChange={setSelectedTab}\n\t\t\t\tgenerateMarkdownPreview={(markdown) =>\n\t\t\t\t\tPromise.resolve(converter.makeHtml(markdown))\n\t\t\t\t}\n\t\t\t\tminEditorHeight={80}\n\t\t\t\theightUnits=\"vh\"\n\t\t\t/>\n\n\t\t</section>\n\t)\n}\n","\nimport './App.css';\nimport React from \"react\"\nimport Sidebar from \"./components/Sidebar\"\nimport Editor from \"./components/Editor\"\n// import { data } from \"./data\"\nimport Split from \"react-split\"\nimport { nanoid } from \"nanoid\"\n\n/**\n * Challenge: Spend 10-20+ minutes reading through the code\n * and trying to understand how it's currently working. Spend\n * as much time as you need to feel confident that you \n * understand the existing code (although you don't need\n * to fully understand everything to move on)\n */\n\nexport default function App() {\n\n  const [notes, setNotes] = React.useState(\n    () => JSON.parse(localStorage.getItem(\"notes\")) || [])\n\n  const [currentNoteId, setCurrentNoteId] = React.useState(() => {\n    //console.log(\"set currentNote Id\", notes[0].id);\n    return (notes[0] && notes[0].id) || \"\"\n  })\n\n  React.useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown note's title here\"\n    }\n    setNotes(prevNotes => [newNote, ...prevNotes])\n    setCurrentNoteId(newNote.id)\n\n  }\n\n  function updateNote(text) {\n    // this doesnt not re-arrange \n    // setNotes(oldNotes => oldNotes.map(oldNote => {\n    //   return oldNote.id === currentNoteId\n    //     ? { ...oldNote, body: text }\n    //     : oldNote\n    // }))\n\n    // Put the most recently-modified note at the top\n    setNotes(oldNotes => {\n      const newArray = []\n      for (let i = 0; i < oldNotes.length; i++) {\n        const oldNote = oldNotes[i]\n        if (oldNote.id === currentNoteId) {\n          newArray.unshift({ ...oldNote, body: text })\n        } else {\n          newArray.push(oldNote)\n        }\n      }\n      return newArray\n    })\n  }\n\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId\n    }) || notes[0]\n  }\n\n  function deleteNote(event, noteId) {\n    event.stopPropagation();\n    setNotes(oldNotes => oldNotes.filter(oldNote => {\n      return oldNote.id !== noteId\n    }))\n  }\n  return (\n    <main>\n      {\n        notes.length > 0\n          ?\n          <Split\n            sizes={[30, 70]}\n            direction=\"horizontal\"\n            className=\"split\"\n          >\n            <Sidebar\n              notes={notes}\n              deleteNote={deleteNote}\n              currentNote={findCurrentNote()}\n              setCurrentNoteId={setCurrentNoteId}\n              newNote={createNewNote}\n            />\n            {\n              currentNoteId &&\n              notes.length > 0 &&\n              <Editor\n                currentNote={findCurrentNote()}\n                updateNote={updateNote}\n              />\n            }\n          </Split>\n          :\n          <div className=\"no-notes\">\n            <h1>You have no notes</h1>\n            <button\n              className=\"first-note\"\n              onClick={createNewNote}\n            >\n              Create one now\n            </button>\n          </div>\n\n      }\n    </main>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);"],"sourceRoot":""}